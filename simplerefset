# -*- coding: utf-8 -*-
# Copyright (c) 2014, Mayo Clinic
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
#     Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#
#     Neither the name of the <ORGANIZATION> nor the names of its contributors
#     may be used to endorse or promote products derived from this software
#     without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
# OF THE POSSIBILITY OF SUCH DAMAGE.
from __future__ import print_function
import argparse
import sys

from utils.Proxy import Proxy


def do_op(opts, operation):
    # Make sure the url is valid and points at a RF2 service
    urlproxy = Proxy(opts.url, opts.changeset, opts.effectivetime, debugging=opts.debug)
    if not urlproxy.ok:
        return None, "Invalid URL: %s" % opts.url
    r = urlproxy.put('simplerefset/%s' % opts.refset, operation=operation, component=opts.concept,
                     leafonly=1 if opts.leaves else 0, children=1 if opts.descendants else 0)
    print("Concept(s) added to refset" if r.ok else "Add was not successful")


def main(args):
    """ Manage simple reference sets.  Use concept management for the reference set itself
    """
    parser = argparse.ArgumentParser(description="Manage simple reference sets")
    parser.add_argument('function', help="[a]dd concepts, [r]emove concepts, [c]lear - remove all concepts, "
                                         "[u]pdate - replace concepts with new set \n"
                                         "Note: use 'concept a -p srs ...' to create the reference set itself",
                        choices=('a', 'r', 'c',  'u'))
    parser.add_argument('-u', '--url', help="RF2 Service base URL", required=True)
    parser.add_argument('-r', '--refset', help="SCTID of simple refset", required=True)
    parser.add_argument('-cs', '--changeset', help="Changeset name or uuid", required=True)
    parser.add_argument('-c', '--concept', help="Concept(s) to add or remove", nargs='*')
    parser.add_argument('-e', '--effectivetime', help="Effective time of addition.  Default: today's date")
    parser.add_argument('--descendants', help="Add or remove concept descendants rather than concept itself",
                        action="store_true")
    parser.add_argument('--leaves', help="Add or remove most distal concept descendants rather than concept itself",
                        action="store_true")
    parser.add_argument('--debug', help="Debugging", action='store_true')

    opts = parser.parse_args(args)
    if opts.function == 'a':
        do_op(opts, "add")
    elif opts.function == 'r':
        do_op(opts, "remove")
    elif opts.function == 'c':
        if opts.concept:
            print("Concept cannot be supplied for clear operation")
        do_op(opts, "remove")
    else:
        print("Unrecognized function")


if __name__ == '__main__':
    main(sys.argv[1:])
