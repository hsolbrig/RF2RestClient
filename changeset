# -*- coding: utf-8 -*-
# Copyright (c) 2014, Mayo Clinic
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
#     Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#
#     Neither the name of the <ORGANIZATION> nor the names of its contributors
#     may be used to endorse or promote products derived from this software
#     without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
# OF THE POSSIBILITY OF SUCH DAMAGE.
import argparse
import sys

from utils.Proxy import Proxy
from utils.InMemoryZip import InMemoryZip

# Separator for dump files
sep = '\r\n'

def check_ok(response, message):
    if not response or (not isinstance(response, str) and not response.ok):
        error(message)
    return response


def error(message):
    print(message, file=sys.stderr)
    sys.exit(1)


def _validchangeset(opts, urlproxy, finalok=False):
    if not opts.changeset or opts.name:
        error("Must supply a changeset UUID or name")
    r = check_ok(urlproxy.get('changeset/'), "Changeset does not exist")
    if not finalok and int(r.ChangeSetReferenceSetEntry.isFinal):
        error("Cannot change a finalized change set")


def add(opts, urlproxy):
    if opts.changeset:
        error("Changeset identifier cannot be specified for a new changeset")
    if opts.name:
        check_ok(urlproxy.get('changeset/%s' % opts.name), "Changeset named %s already exists!" % opts.name)
    r = check_ok(urlproxy.post('changeset', csname=opts.name, description=opts.description, owner=opts.owner),
                 "Changeset creation failed")
    urlproxy.changeset = r.ChangeSetReferenceSetEntry.referencedComponentId.uuid
    print("New changeset created: %s" % urlproxy.changeset + (' (%s)' % opts.name if opts.name else ''))


def rollback(opts, urlproxy):
    _validchangeset(opts, urlproxy)
    if urlproxy.rollback(force=True):
        print("Change set successfully rolled back")
    else:
        print("Roll back failed")


def commit(opts, urlproxy):
    _validchangeset(opts, urlproxy)
    if urlproxy.commit(force=True):
        print("Change set successfully committed")
    else:
        print("Commit failed")


def as_concept(urlproxy, cid):
    return urlproxy.get('concept/%s' % cid, format="tsv")


def create_zip(zipfile, filename, urlroot, entrylist, urlproxy):
    if not entrylist:
        return
    hdr, row1 = urlproxy.get(urlroot + '/' + entrylist[0].id, format="tsv").split('\n')
    data = hdr + '\tchangeset\tlocked' + sep + row1 + urlproxy.changeset_info()
    for e in entrylist[1:]:
        data += sep + (urlproxy.get(urlroot + '/' + e.id, format="tsv").split('\n')[1]) + urlproxy.changeset_info()
    zipfile.addfile(filename, data)


def _f(filename, urlroot, changesetentry, refset=False):
    return 'RF2Release/Snapshot/' + ('Refset/' if refset else 'Terminology/') + filename + 'Snapshot_INT_%s.txt', \
           urlroot, changesetentry

dumplist = [_f('Metadata/der2_sssiiRefset_Changeset', 'changeset', None, refset=True),
            _f('sct2_Concept_', 'concept', 'concept'),
            _f('sct2_Description_', 'description', 'description'),
            _f('sct2_Relationship_', 'relationship', 'relationship'),
            _f('sct2_StatedRelationship_', 'relationship', 'statedRelationship'),
            _f('Language/der2_cRefset_Language', 'language',  'language', refset=True),
            _f('Metadata/der2_ssRefset_ModuleDependency', 'moduledependency', 'moduleDependency', refset=True)]


def dump(opts, urlproxy):
    zipfile = InMemoryZip()
    _validchangeset(opts, urlproxy, finalok=True)
    r = check_ok(urlproxy.get('changeset/%s/details' % opts.changeset, open=True, final=True),
                 "Unable to fetch change set")
    effectivetime = opts.effectivetime if opts.effectivetime else r.ChangeSetDetails.effectiveTime
    for e in dumplist:
        create_zip(zipfile, e[0] % effectivetime, e[1], r.ChangeSetDetails.d[e[2]] if e[2] else [r.ChangeSetDetails],
                   urlproxy)

    zipfile.writetofile('dump.zip')


def main(args):
    """ Query or change the state of a change set
    """
    parser = argparse.ArgumentParser(description="Manage change sets")
    parser.add_argument('function', help="[a]dd, [m]odify, [c]ommit, [r]roolback, [q]uery, [d]ump",
                        choices=('a', 'c', 'm', 'q', 'r', 'd'))
    parser.add_argument('-u', '--url', help="RF2 Service base URL", required=True)
    parser.add_argument('-n', '--name', help="Change set name")
    parser.add_argument('-d', '--description', help="Change set description")
    parser.add_argument('-o', '--owner', help="Change set owner")
    parser.add_argument('-e', '--effectivetime', help="Effective time of addition.  Default: today's date")
    parser.add_argument('-cs', '--changeset', help="Changeset identifier")
    parser.add_argument('--debug', help="Debugging", action='store_true')

    opts = parser.parse_args(args)
    
    urlproxy = Proxy(opts.url, opts.changeset, opts.effectivetime, opts.debug)
    if not urlproxy.ok:
        print("Invalid URL: %s" % opts.url, file=sys.stderr)
        sys.exit(1)
    
    if opts.function == 'a':
        add(opts, urlproxy)
    elif opts.function == 'c':
        commit(opts, urlproxy)
    elif opts.function == 'm':
        print("Modify changeset not implemented")
    elif opts.function == 'q':
        print("Query changeset not implemented")
    elif opts.function == 'r':
        rollback(opts, urlproxy)
    elif opts.function == 'd':
        dump(opts, urlproxy)
    else:
        print("Unrecognized function")


if __name__ == '__main__':
    main(sys.argv[1:])
